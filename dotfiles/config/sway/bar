#!/usr/bin/env python
import asyncio
import json
import os
import signal
import shutil
import sys

from datetime import datetime
from typing import Any, Callable, NamedTuple, Optional, Sequence
from zoneinfo import ZoneInfo


class Event(NamedTuple):
    # both
    name: str
    instance: str
    x: int
    y: int
    button: int
    relative_x: int
    relative_y: int
    width: int
    height: int

    # sway only
    event: Optional[int] = None
    scale: Optional[int] = None  # Not documented in swaybar-protocol(7)

    # i3 only
    output_x: Optional[int] = None
    output_y: Optional[int] = None
    modifiers: Optional[list[str]] = None


class Block(dict[str, Any]):
    def __init__(self, on_change: Optional[Callable[[], Any]] = None, **kwargs: Any):
        super().__init__(kwargs)
        self.on_change = on_change
        self["name"] = type(self).__name__
        self["instance"] = str(id(self))

    def __setitem__(self, key: str, value: Any) -> None:
        dict.__setitem__(self, key, value)
        if self.on_change:
            self.on_change()

    async def handle_event(self, event: Event) -> None:
        pass

    async def destroy(self) -> None:
        pass


class TimeBlock(Block):
    def __init__(self, fmt: str, zones: Sequence[Optional[ZoneInfo]] = (None,), interval: int = 1, **kwargs):
        super().__init__(**kwargs)
        self.fmt = fmt
        self.interval = interval
        self.zones, self.current_zone = zones, 0
        self.task = asyncio.create_task(self.loop())

    def refresh(self) -> None:
        self["full_text"] = datetime.now(self.zones[self.current_zone]).strftime(self.fmt)

    async def loop(self) -> None:
        while True:
            self.refresh()
            await asyncio.sleep(self.interval)

    async def handle_event(self, event: Event) -> None:
        if event.button == 1:
            self.current_zone = (self.current_zone + 1) % len(self.zones)
        elif event.button == 4:
            self.current_zone = (self.current_zone - 1) % len(self.zones)
        elif event.button == 5:
            self.current_zone = (self.current_zone + 1) % len(self.zones)
        self.refresh()

    async def destroy(self) -> None:
        self.task.cancel()
        await self.task


class VolumeBlock(Block):
    @staticmethod
    async def launch_pulsemixer() -> None:
        await asyncio.create_subprocess_shell(
            "kitty pulsemixer",
            start_new_session=True,
        )

    @staticmethod
    async def toggle_mute() -> None:
        await (
            await asyncio.create_subprocess_shell(
                "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle",
            )
        ).wait()

    @staticmethod
    async def increase_volume(amount: int) -> None:
        await (
            await asyncio.create_subprocess_shell(
                f"wpctl set-volume @DEFAULT_AUDIO_SINK@ {amount}%+",
            )
        ).wait()

    @staticmethod
    async def decrease_volume(amount: int) -> None:
        await (
            await asyncio.create_subprocess_shell(
                f"wpctl set-volume @DEFAULT_AUDIO_SINK@ {amount}%-",
            )
        ).wait()

    def __init__(self, fmt: str, mute_fmt: str, **kwargs: Any):
        super().__init__(**kwargs)
        self.fmt = fmt
        self.mute_fmt = mute_fmt
        self.task = asyncio.create_task(self.loop())

    async def loop(self) -> None:
        tracker = await asyncio.create_subprocess_shell(
            "./volume-tracker.lua",
            cwd=os.path.dirname(__file__),
            stdout=asyncio.subprocess.PIPE,
        )

        assert tracker.stdout is not None

        while not tracker.stdout.at_eof():
            volume, mute = (await tracker.stdout.readline()).strip().split()
            if mute == b"true":
                self["full_text"] = self.mute_fmt.format(round(float(volume) * 100))
            else:
                self["full_text"] = self.fmt.format(round(float(volume) * 100))

    async def handle_event(self, event: Event) -> None:
        if event.button == 1:
            await VolumeBlock.launch_pulsemixer()
        elif event.button == 3:
            await VolumeBlock.toggle_mute()
        elif event.button == 4:
            await VolumeBlock.increase_volume(5)
        elif event.button == 5:
            await VolumeBlock.decrease_volume(5)

    async def destroy(self) -> None:
        self.task.cancel()
        await self.task


class DiskUsage(Block):
    GB = 1024 ** 3

    def __init__(self, fmt: str, interval: int = 5, path: str = "/", **kwargs: Any):
        super().__init__(**kwargs)
        self.fmt = fmt
        self.interval = interval
        self.path = path
        self.task = asyncio.create_task(self.loop())

    async def loop(self) -> None:
        while True:
            usage = shutil.disk_usage(self.path)
            self["full_text"] = self.fmt.format(
                total=usage.total / DiskUsage.GB,
                used=usage.used / DiskUsage.GB,
                free=usage.free / DiskUsage.GB,
                percent_used=100 * usage.used / (usage.used + usage.free),
                precent_free=100 * usage.free / (usage.used + usage.free),
            )

            await asyncio.sleep(self.interval)

    async def destroy(self) -> None:
        self.task.cancel()
        await self.task


async def handle_events(reader: asyncio.StreamReader, blocks: Sequence[Block]) -> None:
    tasks: set[asyncio.Task] = set()

    try:
        await reader.readuntil(b"[")
        while not reader.at_eof():
            data = (await reader.readuntil(b"}")).decode().strip(" ,\n")
            event = Event(**json.loads(data))
            for block in blocks:
                if block["name"] == event.name and block["instance"] == event.instance:
                    task = asyncio.create_task(block.handle_event(event))
                    tasks.add(task)
                    task.add_done_callback(tasks.discard)
    except (asyncio.IncompleteReadError, asyncio.CancelledError):
        for task in tasks:
            task.cancel()


async def main() -> None:
    loop = asyncio.get_running_loop()

    shutdown = asyncio.Event()
    loop.add_signal_handler(signal.SIGTERM, shutdown.set)
    loop.add_signal_handler(signal.SIGINT, shutdown.set)

    dirty = asyncio.Event()
    blocks: Sequence[Block] = (
        DiskUsage(
            " {used:.1f} GiB ({percent_used:.1f}%)",
            on_change=dirty.set
        ),
        VolumeBlock(" {}%", " {}%", on_change=dirty.set),
        TimeBlock(
            " %a %b %d %Y  %I:%M:%S %p %Z",
            zones=(None, ZoneInfo("America/New_York")),
            on_change=dirty.set,
        ),
    )

    reader = asyncio.StreamReader()
    protocol = asyncio.StreamReaderProtocol(reader)
    await loop.connect_read_pipe(lambda: protocol, sys.stdin)
    event_handler = asyncio.create_task(handle_events(reader, blocks))

    print('{"version": 1, "click_events": true}', flush=True)
    print("[", flush=True)

    while not (event_handler.done() or shutdown.is_set()):
        dirty.clear()
        print(json.dumps(blocks), ",", flush=True)
        await asyncio.wait(
            {
                event_handler,
                asyncio.create_task(shutdown.wait()),
                asyncio.create_task(dirty.wait())
            },
            return_when=asyncio.FIRST_COMPLETED,
        )

    await asyncio.wait(
        {asyncio.create_task(block.destroy()) for block in blocks},
    )


if __name__ == "__main__":
    asyncio.run(main())
